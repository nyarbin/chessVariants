%============================================================
%		   METAGAME Game-Playing Workbench
%		  Copyright (c) 1992 Barney D. Pell
%============================================================

% TURNCOAT_CHESS (all of it!) as a symmetric chess-like game.
%
% This was one of the first games generated by the generator
% for symmetric chess-like games.  
% The game, and a  strategic analysis of it, are discussed in 
% the paper:  Metagame in Symmetric Chess-Like Games.
%
% This serves as a good introduction to this class of games.

game		turncoat_chess
goals 		stalemate player
board_size 	5 by 5
board_type 	planar  
promote_rank	5
setup		termite at { ( 1 , 1 ) ( 2 , 1 ) }
		slug at { ( 3 , 1 ) }
		firefly at { ( 4 , 1 ) ( 5 , 1 ) }

define slug
	moving 
		movement 
			  ride longest
			  < 2 , 0 > symmetry all_symmetry
		end movement 
	end moving	

	capturing 
		capture by { clobber }
		type [ any_player any_piece ]
		effect remove
			movement 
				hop 	before 	[ x >= 0 ]
					over 	[ x = 2 ] 
					after 	[ x >= 0 ]
				hop_over	[ any_player { firefly } ]
				< 0 , 1 > symmetry { forward side } 
			end movement
		end capture
	end capturing

	promoting 
		decision 	player
		options  	[ { player } any_piece ]
	end promoting
end define   


define termite
	moving
		movement
			hop before [ x  >= 0 ]
			    over   [ x  = 1 ]
			    after  [ x  >= 0 ]
			hop_over [ any_player  { termite } ]
			< 0 , 1 > symmetry { side  rotation }
		end movement

		movement
			ride longest
			< 0 , 1 > symmetry all_symmetry
		end movement
	end moving

	capturing
  	   capture
		by { clobber }
		type [ any_player  any_piece ]
		effect  remove 
		movement
			leap
			< 2 , 3 > symmetry { forward  side }
		end movement
	   end capture
	end capturing

	promoting
		decision player
		options [ { opponent }  any_piece ]
	end promoting
end define

define firefly
	moving
		movement
			leap
			< 1 , 2 > symmetry all_symmetry
		end movement

		movement
			hop before [ x  >= 0 ]
			    over   [ x  = 1 ]
			    after  [ x  >= 0 ]
			hop_over [ any_player  { termite } ]
			< 2 , 1 > symmetry { side  rotation }
		end movement

		movement
			leap
			< 2 , 3 > symmetry all_symmetry
		end movement

		movement
			leap
			< 0 , 1 > symmetry all_symmetry
		end movement
	end moving

	capturing
	  capture	by { clobber }
			type [ any_player  any_piece ]
			effect  remove 

			movement
				leap
				< 0 , 1 > symmetry all_symmetry
			end movement

			movement
				ride 
				< 2 , 3 > symmetry { forward  side }
			end movement
	  end capture
	end capturing

	promoting
		decision player
		options [ { opponent }  any_piece ]
	end promoting
end define

end game .
